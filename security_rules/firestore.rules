rules_version = '2';
service cloud.firestore {
  
  function isAuthenticated(){
    return request.auth != null;
  }

  function isTheSameUser(uid) {
    return request.auth.uid == uid;
  }

  match /databases/{database}/documents {

    match /users/{uid} {
      allow create: if true;
      allow update: if isAuthenticated();
      allow read: if isAuthenticated();
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
      match /posts/{postId} {
        allow read, write: if isAuthenticated();
        match /postComments/{postCommentId} {
          allow read, write: if isAuthenticated(); 
          match /postCommentReplys/{postCommentReplyId} {
            allow read, write: if isAuthenticated();
            match /postCommentReplyLikes/{activeUid} {
              allow read, write: if isAuthenticated();
            }
          }
          match /postCommentLikes/{activeUid} {
            allow read, write: if isAuthenticated();
          }
        }
        match /postLikes/{activeUid} {
          allow read, write: if isAuthenticated();
        }
        match /postBookmarks/{activeUid} {
          allow read, write: if isAuthenticated();
        }
      }
      match /followers/{followerUid} {
        allow read: if isTheSameUser(uid);
        allow create: if isTheSameUser(followerUid);
        allow delete: if isTheSameUser(uid) || isTheSameUser(followerUid);
      }
      
    }

    match /userMeta/{uid} {
      allow read, update, delete: if request.auth.uid == uid;
      allow create: if true;
      match /tokens/{tokenId} {
        allow write: if isAuthenticated();
        allow list: if isAuthenticated();
        allow get: if request.resource.data.uid == request.auth.uid;
      }
      match /notifications/{notificationId} {
        allow read, write: if isAuthenticated();
      }
      match /timelines/{postId} {
        allow read, write: if isAuthenticated();
      }
    }

    match /nftOwners/{nftOwnerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidNFTowners(request.resource.data);
      allow update: if isAuthenticated() && isValidNFTowners(request.resource.data);
      allow delete: if false;
    }

    match /officialAdsenses/{officialAdsense} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
  }
}