rules_version = '2';
service cloud.firestore {
  
  function isAuthenticated(){
    return request.auth != null;
  }

  function isValidUser(user) {
    return user.size() == 42 // max48
    && 'birthDay' in user && user.birthDay is timestamp
    && 'blockingUids' in user && user.blockingUids is list
    && 'blockingIpv6AndUids' in user && user.blockingIpv6AndUids is list
    && 'bookmarks' in user && user.bookmarks is list
    && 'bookmarkLabels' in user && user.bookmarkLabels is list
    && 'commentNotifications' in user && user.commentNotifications is list
    && 'createdAt' in user && user.createdAt is timestamp
    && 'description' in user && user.description is string
    && 'dmState' in user && user.dmState is string
    && 'followNotifications' in user && user.followNotifications is list
    && 'followersCount' in user && user.followersCount is int
    && 'followerUids' in user && user.followerUids is list
    && 'followingUids' in user && user.followingUids is list
    && 'gender' in user && user.gender is string
    && 'imageURL' in user && user.imageURL is string
    && 'isAdmin' in user && user.isAdmin is bool
    && 'isKeyAccount' in user && user.isKeyAccount is bool
    && 'isNFTicon' in user && user.isNFTicon is bool
    && 'isOfficial' in user && user.isOfficial is bool
    && 'isSubAdmin' in user && user.isSubAdmin is bool
    && 'language' in user && user.language is string
    && 'likedComments' in user && user.likedComments is list
    && 'likeNotifications' in user && user.likeNotifications is list
    && 'likedReplys' in user && user.likedReplys is list
    && 'likes' in user && user.likes is list
    && 'link' in user && user.link is string
    && 'mutesUids' in user && user.mutesUids is list
    && 'mutesIpv6AndUids' in user && user.mutesIpv6AndUids is list
    && 'noDisplayWords' in user && user.noDisplayWords is list
    && 'otherLinks' in user && user.otherLinks is list
    && 'readNotificationIds' in user && user.readNotificationIds is list
    && 'readPosts' in user && user.readPosts is list
    && 'recommendState' in user && user.recommendState is string
    && 'replyNotifications' in user && user.replyNotifications is list
    && 'score' in user && user.score is int
    && 'searchHistory' in user && user.searchHistory is list
    && 'subUserName' in user && user.subUserName is string
    && 'uid' in user && user.uid is string
    && 'updatedAt' in user && user.updatedAt is timestamp
    && 'userName' in user && user.userName is string
    && 'walletAddress' in user && user.walletAddress is string
    && 'watchLists' in user && user.watchLists is list;
  }

  
  function isValidPost(post) {
    return post.size() == 33
    && 'audioURL' in post && post.audioURL is string
    && 'bookmarks' in post && post.bookmarks is list
    && 'bookmarksCount' in post && post.bookmarksCount is int
    && 'commentsState' in post && post.commentsState is string
    && 'createdAt' in post && post.createdAt is timestamp
    && 'country' in post && post.country is string
    && 'description' in post && post.description is string // un used
    && 'genre' in post && post.genre is string // un used
    && 'hashTags' in post && post.hashTags is list // un used
    && 'imageURL' in post && post.imageURL is string
    && 'impression' in post && post.impression is int // un used
    && 'ipv6' in post && post.ipv6 is string
    && 'isNFTicon' in post && post.isNFTicon is bool
    && 'isOfficial' in post && post.isOfficial is bool
    && 'isPinned' in post && post.isPinned is bool // un used
    && 'isPlayedCount' in post && post.isPlayedCount is int
    && 'likes' in post && post.likes is list
    && 'likesCount' in post && post.likesCount is int
    && 'link' in post && post.link is string
    && 'noDisplayWords' in post && post.noDisplayWords is list
    && 'noDisplayUids' in post && post.noDisplayUids is list
    && 'negativeScore' in post && post.negativeScore is int // un used
    && 'otherLinks' in post && post.otherLinks is list // un used
    && 'postId' in post && post.postId is string
    && 'positiveScore' in post && post.positiveScore is int
    && 'score' in post && post.score is int
    && 'tagUids' in post && post.tagUids is list // un used
    && 'title' in post && post.title is string
    && 'uid' in post && post.uid is string
    && 'updatedAt' in post && post.updatedAt is timestamp
    && 'userDocId' in post && post.userDocId is string
    && 'userImageURL' in post && post.userImageURL is string
    && 'userName' in post && post.userName is string;
  }

  function isValidComment(comment) {
    return
    comment.size() == 18
    && 'comment' in comment && comment.comment is string
    && 'commentId' in comment && comment.commentId is string
    && 'createdAt' in comment && comment.createdAt is timestamp
    && 'followersCount' in comment && comment.followersCount is int
    && 'ipv6' in comment && comment.ipv6 is string
    && 'isNFTicon' in comment && comment.isNFTicon is bool
    && 'isOfficial' in comment && comment.isOfficial is bool
    && 'likesUids' in comment && comment.likesUids is list
    && 'likesUidsCount' in comment && comment.likesUidsCount is int
    && 'negativeScore' in comment && comment.negativeScore is int
    && 'passiveUid' in comment && comment.passiveUid is string
    && 'positiveScore' in comment && comment.positiveScore is int
    && 'postId' in comment && comment.postId is string
    && 'score' in comment && comment.score is int
    && 'uid' in comment && comment.uid is string
    && 'userDocId' in comment && comment.userDocId is string
    && 'userName' in comment && comment.userName is string
    && 'userImageURL' in comment && comment.userImageURL is string;
  }

  function isValidReply(reply) {
    return 
    reply.size() == 19
    && 'elementId' in reply && reply.elementId is string
    && 'elementState' in reply && reply.elementState is string
    && 'createdAt' in reply && reply.createdAt is timestamp
    && 'followersCount' in reply && reply.followersCount is int
    && 'ipv6' in reply && reply.ipv6 is string
    && 'isNFTicon' in reply && reply.isNFTicon is bool
    && 'isOfficial' in reply && reply.isOfficial is bool
    && 'likesUids' in reply && reply.likesUids is list
    && 'likesUidsCount' in reply && reply.likesUidsCount is int
    && 'negativeScore' in reply && reply.negativeScore is int
    && 'passiveUid' in reply && reply.passiveUid is string
    && 'positiveScore' in reply && reply.positiveScore is int
    && 'reply' in reply && reply.reply is string
    && 'replyId' in reply && reply.replyId is string
    && 'score' in reply && reply.score is int
    && 'uid' in reply && reply.uid is string
    && 'userDocId' in reply && reply.userDocId is string
    && 'userName' in reply && reply.userName is string
    && 'userImageURL' in reply && reply.userImageURL is string;
  }

  function isValidNFTowners(nftOwner) {
    return 
    nftOwner.size() == 6
    && 'ethPrice' in nftOwner && nftOwner.ethPrice is int
    && 'link' in nftOwner && nftOwner.link is string
    && 'userName' in nftOwner && nftOwner.name is string
    && 'number' in nftOwner && nftOwner.number is int
    && 'uid' in nftOwner && nftOwner.uid is string
    && 'userImageURL' in nftOwner && nftOwner.userImageURL is string;
  }

  function isValidWatchList(watchList) {
    return
    watchList.size() == 6
    && 'creatorUid' in watchList && watchList.creatorUid is string
    && 'uids' in watchList && watchList.uids is list
    && 'label' in watchList && watchList.label is string
    && 'watchListId' in watchList && watchList.watchListId is string
    && 'createdAt' in watchList && watchList.createdAt is timestamp
    && 'updatedAt' in watchList && watchList.updatedAt is timestamp;
  }

  function isValidBookmarkLabel(bookmarkLabel) {
    return
    bookmarkLabel.size() == 6
    && 'creatorUid' in bookmarkLabel && bookmarkLabel.creatorUid is string
    && 'postIds' in bookmarkLabel && bookmarkLabel.postIds is list
    && 'label' in bookmarkLabel && bookmarkLabel.label is string
    && 'bookmarkLableId' in bookmarkLabel && bookmarkLabel.postIds is string
    && 'createdAt' in bookmarkLabel && bookmarkLabel.postIds is timestamp
    && 'updatedAt' in bookmarkLabel && bookmarkLabel.postIds is timestamp;
  }
  match /databases/{database}/documents {

    match /users/{userId} {
      allow create: if isAuthenticated()
      && isValidUser(request.resource.data)
      && request.resource.data.uid == request.auth.uid;
      allow update: if isAuthenticated()
      && request.resource.data.followingUids.size() <= 500;
      allow read: if isAuthenticated();
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
    }
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
      && isValidPost(request.resource.data);
      allow update: if isAuthenticated()
      && isValidPost(request.resource.data);
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
    }

    match /replys/{replyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
      && isValidReply(request.resource.data);
      allow update: if isAuthenticated()
      && isValidReply(request.resource.data);
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
    }

    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
      && isValidComment(request.resource.data);
      allow update: if isAuthenticated()
      && isValidComment(request.resource.data);
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
    }

    match /nftOwners/{nftOwnerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidNFTowners(request.resource.data);
      allow update: if isAuthenticated() && isValidNFTowners(request.resource.data);
      allow delete: if false;
    }

    match /watchLists/{watchList} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
      && isValidWatchList(request.resource.data);
      allow update: if isAuthenticated()
      && isValidWatchList(request.resource.data);
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
    }

    match /bookmarkLabels/{bookmarkLabel} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
      && isValidBookmarkLabel(request.resource.data);
      allow update: if isAuthenticated()
      && isValidBookmarkLabel(request.resource.data);
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
    }
  }
}