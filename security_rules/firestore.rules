rules_version = '2';
service cloud.firestore {
  
  function isAuthenticated(){
    return request.auth != null;
  }

  function isValidUser(user) {
    return 
    'createdAt' in user && user.createdAt is timestamp
    && 'updatedAt' in user && user.updatedAt is timestamp;
  }

  function isValidUserMeta(userMeta) {
    return 'createdAt' in user && user.createdAt is timestamp
    && 'updatedAt' in user && user.updatedAt is timestamp;
  }
  
  function isValidPost(post) {
    return true;
  }

  function isValidComment(comment) {
    return 'createdAt' in comment && comment.createdAt is timestamp;
  }

  function isValidReply(reply) {
    return true;
  }

  function isValidNFTowners(nftOwner) {
    return 
    nftOwner.size() == 7
    && 'ethPrice' in nftOwner && nftOwner.ethPrice is float
    && 'link' in nftOwner && nftOwner.link is string
    && 'userName' in nftOwner && nftOwner.name is string
    && 'number' in nftOwner && nftOwner.number is int
    && 'uid' in nftOwner && nftOwner.uid is string
    && 'usdPrice' in nftOwner && nftOwner.usdPrice is float
    && 'userImageURL' in nftOwner && nftOwner.userImageURL is string;
  }

  function basicValidation(uid) {
    return isAuthenticated() && request.auth.uid == uid;
  }

  match /databases/{database}/documents {

    match /users/{uid} {
      allow create: if true;
      allow update: if isAuthenticated();
      allow read: if isAuthenticated();
      allow delete: if isAuthenticated()
      && request.auth.uid == resource.data.uid;
      match /posts/{postId} {
        allow read, write: if true;
        match /postComments/{postCommentId} {
          allow read, write: if true; 
          match /postCommentReplys/{postCommentReplyId} {
            allow read, write: if true;
            match /postCommentReplyLikes/{activeUid} {
              allow read, write: if true;
            }
          }
          match /postCommentLikes/{activeUid} {
            allow read, write: if true;
          }
        }
        match /postLikes/{activeUid} {
          allow read, write: if true;
        }
        match /postBookmarks/{activeUid} {
          allow read, write: if true;
        }
      }
      match /followers/{followerUid} {
        allow read: if basicValidation(uid);
        allow create: if basicValidation(followerUid);
        allow delete: if basicValidation(uid) || basicValidation(followerUid);
      }
      
    }

    match /userMeta/{uid} {
      allow read: if request.auth.uid == uid;
      allow create: if true;
      match /tokens/{tokenId} {
        allow write: if isAuthenticated();
        allow list: if isAuthenticated();
        allow get: if request.resource.data.uid == request.auth.uid;
      }
      match /notifications/{notificationId} {
        allow read, write: if isAuthenticated();
      }
      match /timelines/{postId} {
        allow read, write: if isAuthenticated();
      }
    }

    match /nftOwners/{nftOwnerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidNFTowners(request.resource.data);
      allow update: if isAuthenticated() && isValidNFTowners(request.resource.data);
      allow delete: if false;
    }

    match /officialAdsenses/{officialAdsense} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
  }
}