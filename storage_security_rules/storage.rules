rules_version = '2';
service firebase.storage {
  
  function isAuthenticated(){
    return request.auth != null;
  }

  function isTheSameUser(uid) {
    return request.auth.uid == uid && isAuthenticated();
  }

  function isNotTheSameThing(resource) {
    return resource == null;
  }

  function isValidPost(storagePostName) {
    // request.resource.contentType == 'video/mp4' is false;
    return storagePostName.matches('.*\\.aac')
  }

  function isValidImage(imageName) {
    // (request.resource.contentType == 'image/jpeg' || request.resource.contentType == 'image/png'); is false
    return imageName.matches('.*\\.jpeg');
  }

  function canCreate(uid, resource) {
    return isTheSameUser(uid) && isNotTheSameThing(resource);
  }

  function canDelete(uid) {
    return isTheSameUser(uid);
  }

  match /b/{bucket}/o {
    match /postImages/{uid} {
      allow create: if canCreate(uid,resource);
      allow delete: if canDelete(uid);
      match /{storageImageName} {
        allow read: if isTheSameUser(uid) && isValidImage(storageImageName);
        allow create: if canCreate(uid,resource) && isValidImage(storageImageName);
        allow delete: if canDelete(uid);
      }
    }

    match /posts/{uid} {
      allow create: if canCreate(uid,resource);
      allow delete: if canDelete(uid);
      match /{storagePostName} {
        allow read: if isTheSameUser(uid) && isValidPost(storagePostName);
        allow create: if canCreate(uid,resource) && isValidPost(storagePostName);
        allow delete: if canDelete(uid);
      }
    }

    match /userImages/{uid} {
      allow create: if canCreate(uid,resource);
      allow delete: if canDelete(uid);
      match /{storageImageName} {
        allow read: if isTheSameUser(uid) && isValidImage(storageImageName);
        allow create: if canCreate(uid,resource) && isValidImage(storageImageName);
        allow delete: if canDelete(uid);
      }
    }

  }
}
