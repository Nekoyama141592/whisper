rules_version = '2';
service firebase.storage {
  // sample
  function isAuthenticated(){
    return request.auth != null;
  }

  function isTheSameUser(uid) {
    return request.auth.uid == uid;
  }

  function isNotTheSameThing(resource) {
    return resource == null;
  }

  match /b/{bucket}/o {
    match /postImages/{uid} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
      && isTheSameUser(uid) && isNotTheSameThing(resource) ;
      allow update, delete, if isAuthenticated() && isTheSameUser(uid);
      match /{postImageName} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() 
        && isTheSameUser(uid) && isNotTheSameThing(resource) ;
        allow update, delete, if isAuthenticated() && isTheSameUser(uid);
      }
    }

    match /posts/{uid} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
      && isTheSameUser(uid) && isNotTheSameThing(resource) ;
      allow update, delete, if isAuthenticated() && isTheSameUser(uid);
      match /{storagePostName} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() 
        && isTheSameUser(uid) && isNotTheSameThing(resource) ;
        allow update, delete, if isAuthenticated() && isTheSameUser(uid);
      }
    }

    match /userImages/{uid} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
      && isTheSameUser(uid) && isNotTheSameThing(resource) ;
      allow update, delete, if isAuthenticated() && isTheSameUser(uid);
      match /{storageImageName} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() 
        && isTheSameUser(uid) && isNotTheSameThing(resource) ;
        allow update, delete, if isAuthenticated() && isTheSameUser(uid);
      }
    }

  }
}
